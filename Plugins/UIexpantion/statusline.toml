#TODO list -------------------------------------------------------
#
# 'itchyny/lightline.vim'
# - エラー時の色定義 上手く動かない...
#   - lspwarning, lsperrorを component_function に登録時
#     - 編集と同期してリアルタイムで更新されるがカラーハイライトが機能しない
#   - lspwarning, lsperrorを component_expand に登録時
#     - 編集と同期 AutoLSP に登録したlightline#update()時のみ更新されるがカラーハイライトが機能する
#   - 目標はリアルタイムに反映され，カラーハイライトがつくこと.
#     ^ 現在: イベント検出数を増やして対応.意外と悪くない

# ステータスライン(& タブライン)カスタマイズ 
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" タブを常に表示
set showtabline=2

" ----------------------------------------
"  lightline フォーマット設定
" ----------------------------------------
" lightline 設定
let g:lightline = {'separator': {'left': '', 'right': ''}, 'subseparator': {'left': '','right': ''}, 'mode_map': {'c': 'NORMAL'},}

" lightline.componet 定義
let g:lightline.component           = {}
let g:lightline.component.dir       = '%.35(%{expand("%:h:s?\\S$?\\0/?")}%)'
let g:lightline.component.winbufnum = '%n%{repeat(",", winnr())}%<'
let g:lightline.component.rows      = '%L'
let g:lightline.component.cd        = '%.35(%{fnamemodify(getcwd(), ":~")}%)'
let g:lightline.component.tabopts   = '%{&et?"et":""}%{&ts}:%{&sw}:%{&sts},%{&tw}'
let g:lightline.component.lineinfo  = '%l/%L'

" lightline.componet_function 定義
let g:lightline.component_function                = {}
let g:lightline.component_function.fugitive       = 'StlFugitive'
let g:lightline.component_function.cfi            = 'StlCurrentFuncInfo'
let g:lightline.component_function.currentfuncrow = 'StlCurrentFuncRow'
let g:lightline.component_function.modified       = 'LightlineModified'
let g:lightline.component_function.readonly       = 'LightlineReadonly'
let g:lightline.component_function.fugitive       = 'LightlineFugitive'
let g:lightline.component_function.filename       = 'LightlineFilename'
let g:lightline.component_function.fileformat     = 'LightlineFileformat'
let g:lightline.component_function.filetype       = 'LightlineFiletype'
let g:lightline.component_function.fileencoding   = 'LightlineFileencoding'
let g:lightline.component_function.mode           = 'LightlineMode'
let g:lightline.component_function.lsp            = 'LspServerStatusForStatusLine'
" let g:lightline.component_function.lspwarning = 'LspWarningNum'
" let g:lightline.component_function.lsperror   = 'LspErrorNum'

" lightline.component_expand 定義
let g:lightline.component_expand            = {}
let g:lightline.component_expand.buffers    = 'lightline#bufferline#buffers'
let g:lightline.component_expand.lspwarning = 'LspWarningNum'
let g:lightline.component_expand.lsperror   = 'LspErrorNum'

" lightline.component_type 定義
let g:lightline.component_type            = {}
let g:lightline.component_type.buffers    = 'tabsel'
let g:lightline.component_type.lspwarning = 'warning'
let g:lightline.component_type.lsperror   = 'error'
let g:lightline.component_type.lsp        = 'right'

" ステータスラインの表示フォーマット定義
" 動的表示用
let g:lightline.active         = {}
let g:lightline.active.left    = [['mode', 'paste'], ['fugitive'], ['filename', 'readonly']]
let g:lightline.active.right   = [['lsperror'], ['lspwarning'], ['lsp'], ['lineinfo']]

" 静的表示用
let g:lightline.inactive       = {}
let g:lightline.inactive.left  = [['mode', 'paste'], ['fugitive'], ['filename', 'readonly']]
let g:lightline.inactive.right = [['lineinfo']]

" タブラインの表示フォーマット定義
let g:lightline.tabline = {}
let g:lightline.tabline = {'left': [ ['buffers'] ], 'right': [ ['fileformat'], ['fileencoding'], ['filetype'], ['cd'] ]}


" ----------------------------------------
" component 定義
" ----------------------------------------
function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 40 ? lightline#mode() : ''
endfunction

function! LspServerStatusForStatusLine()
    return g:lsp#get_server_status()
endfunction

function! LspWarningNum()
    let s:warning_num = lsp#get_buffer_diagnostics_counts()['warning']
    return s:warning_num == 0 ? '' : 'Warning:' . s:warning_num
endfunction

function! LspErrorNum()
    let s:error_num = lsp#get_buffer_diagnostics_counts()['error']
    return s:error_num == 0 ? '' : 'Error:' . s:error_num
endfunction

" LSPサーバーが running 状態になっていないと表示されないみたい...
" タイミング:ファイル展開,ファイル保存,補完完了,カーソル操作停止時(Insert/Normal)
" 理想はLSPの diagnostics が完了時? (それが一番効率的な気がする)
augroup AutoLSP
  autocmd!
  autocmd BufEnter,BufWritePost,CompleteDone,CursorHold,CursorHoldI *.py,*.c,*.cpp call lightline#update()
augroup END
'''


# ウィンドウ上部のタブを拡張
[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
depends = ['lightline.vim']
hook_add = '''
" バッファ名に番号を表示しない
let g:lightline#bufferline#show_number = 0
" バッファ名を表示するときにパスを省略型で表示
let g:lightline#bufferline#shorten_path = 1
" 名前の付いていないバッファが表示された時の標記方法
let g:lightline#bufferline#unnamed = '[No Name]'
" バッファの表示設定(相対パスで表示)
let g:lightline#bufferline#filename_modifier = '%f'
'''

