#TODO list -------------------------------------------------------
#
# 'itchyny/lightline.vim'
# - エラー時の色定義 上手く動かない...


# ステータスライン(& タブライン)カスタマイズ 
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" タブを常に表示
set showtabline=2

" ----------------------------------------
"  lightline フォーマット設定
" ----------------------------------------
" 初期化
command! -bar LightLineUpdate call lightline#init()| call lightline#colorscheme()| call lightline#update()

" lightline 設定
let g:lightline = {'separator': {'left': '', 'right': ''}, 'subseparator': {'left': '','right': ''}, 'mode_map': {'c': 'NORMAL'},}

let g:lightline.colorscheme = 'mypalette'
let g:pltt = {'inactive': {}, 'normal': {}, 'insert': {}, 'visual': {}, 'tabline': {}}

" lightline.componet 定義
let g:lightline.component           = {}
let g:lightline.component.dir       = '%.35(%{expand("%:h:s?\\S$?\\0/?")}%)'
let g:lightline.component.winbufnum = '%n%{repeat(",", winnr())}%<'
let g:lightline.component.rows      = '%L'
let g:lightline.component.cd        = '%.35(%{fnamemodify(getcwd(), ":~")}%)'
let g:lightline.component.tabopts   = '%{&et?"et":""}%{&ts}:%{&sw}:%{&sts},%{&tw}'
let g:lightline.component.lineinfo  = '%l/%L'

" lightline.componet_function 定義
let g:lightline.component_function                = {}
let g:lightline.component_function.fugitive       = 'StlFugitive'
let g:lightline.component_function.cfi            = 'StlCurrentFuncInfo'
let g:lightline.component_function.currentfuncrow = 'StlCurrentFuncRow'
let g:lightline.component_function.modified       = 'LightlineModified'
let g:lightline.component_function.readonly       = 'LightlineReadonly'
let g:lightline.component_function.fugitive       = 'LightlineFugitive'
let g:lightline.component_function.filename       = 'LightlineFilename'
let g:lightline.component_function.fileformat     = 'LightlineFileformat'
let g:lightline.component_function.filetype       = 'LightlineFiletype'
let g:lightline.component_function.fileencoding   = 'LightlineFileencoding'
let g:lightline.component_function.mode           = 'LightlineMode'
let g:lightline.component_function.lspwarning     = 'LspWarningNum'
let g:lightline.component_function.lsperror       = 'LspErrorNum'
let g:lightline.component_function.lsp            = 'LspServerStatusForStatusLine'

" lightline.component_expand 定義
let g:lightline.component_expand            = {}
let g:lightline.component_expand.buffers    = 'lightline#bufferline#buffers'

" lightline.component_type 定義
let g:lightline.component_type            = {}
let g:lightline.component_type.buffers    = 'tabsel'
let g:lightline.component_type.lspwarning = 'warning'
let g:lightline.component_type.lsperror   = 'error'
let g:lightline.component_type.lsp        = 'lspstatus'

" ステータスラインの表示フォーマット定義
" 動的表示用
let g:lightline.active         = {}
let g:lightline.active.left    = [['mode', 'paste'], ['fugitive'], ['filename', 'readonly']]
let g:lightline.active.right   = [['lsperror'], ['lspwarning'], ['lsp'], ['lineinfo']]
" 静的表示用
let g:lightline.inactive       = {}
let g:lightline.inactive.left  = [['mode', 'paste'], ['fugitive'], ['filename', 'readonly']]
let g:lightline.inactive.right = [['lineinfo']]

" タブラインの表示フォーマット定義
let g:lightline.tabline = {}
let g:lightline.tabline = {'left': [ ['buffers'] ], 'right': [ ['fileformat'], ['fileencoding'], ['filetype'], ['cd'] ]}

" ----------------------------------------
" カラースキーマ設定
" ----------------------------------------

" 色定義 ( [d]ark, [n]ormal, [l]ight ) 参考 : https://www.materialui.co/colors
let s:blk_d = ['#212121', 233]
let s:blk_n = ['#424242', 237]
let s:blk_l = ['#616161', 241]

let s:gry_d = ['#757575', 242]
let s:gry_n = ['#9E9E9E', 246]
let s:gry_l = ['#BDBDBD', 248]

let s:wht_d = ['#90A4AE', 249]
let s:wht_n = ['#EEEEEE', 252]
let s:wht_l = ['#FAFAFA', 255]

let s:red_d = ['#e53935', 124]
let s:red_n = ['#ef5350',   9]
let s:red_l = ['#ef9a9a',   1]

let s:grn_d = ['#00796B',  28]
let s:grn_n = ['#26A69A',   2]
let s:grn_l = ['#80CBC4',  10]

let s:blu_d = ['#1976D2',  20]
let s:blu_n = ['#2196F3',   4]
let s:blu_l = ['#64B5F6',  31]

let s:org_d = ['#FF6F00', 166]
let s:org_n = ['#FF9800', 172]
let s:org_l = ['#FFCC80', 179]

" リスト要素 : 
" [{文字色},{背景色},{カラーターミナルの文字色},{カラーターミナルの背景色},{文字装飾(省略可)}]

" ステータスライン基本色
let g:STL_BASECOLOR = [s:wht_n[0], s:blk_n[0], s:wht_n[1], s:blk_d[1]]
let g:pltt.inactive.middle = [g:STL_BASECOLOR]

" ステータスライン強調色(反対色)
let g:STL_ATTRIBUTECOLOR = [s:blk_d[0], s:wht_n[0], s:blk_d[1], s:wht_d[1]]

" ステータスライン左側(Mode Fugitive Filename None None)
let g:pltt.inactive.left = [
            \ [s:wht_n[0], s:grn_d[0], s:wht_n[1], s:grn_d[1]],
            \ [s:wht_n[0], s:blk_n[0], s:wht_n[1], s:blk_n[1]],
            \ [s:wht_n[0], s:blk_l[0], s:wht_n[1], s:blk_l[1]],
            \ [s:wht_l[0], s:gry_d[0], s:wht_l[1], s:gry_d[1]],
            \ ]

" ステータスライン右側(LSPError LSPWarning LSPStatus LineNum None)
let g:pltt.inactive.right = [
            \ [s:wht_l[0], s:blk_d[0], s:wht_l[1], s:blk_d[1]],
            \ [s:wht_l[0], s:blk_n[0], s:wht_l[1], s:blk_n[1]],
            \ [s:wht_n[0], s:blk_l[0], s:wht_n[1], s:blk_l[1]],
            \ [s:wht_n[0], s:gry_d[0], s:wht_n[1], s:gry_d[1]],
            \ [s:wht_n[0], s:gry_n[0], s:wht_n[1], s:gry_n[1]],
            \ ]

" ノーマルモード中央
let g:pltt.normal.middle = g:pltt.inactive.middle

" ノーマルモード左側
let g:pltt.normal.left = deepcopy(g:pltt.inactive.left)

" ノーマルモード右側
let g:pltt.normal.right = deepcopy(g:pltt.inactive.right)

" インサートモード(中央)
let g:pltt.insert.middle = [g:STL_BASECOLOR]

" インサートモード(左側)
let g:pltt.insert.left = [
            \ [s:wht_n[0], s:blu_n[0], s:wht_n[1], s:blu_n[1]],
            \ [s:wht_n[0], s:blk_n[0], s:wht_n[1], s:blk_n[1]],
            \ [s:wht_n[0], s:blk_l[0], s:wht_n[1], s:blk_l[1]],
            \ [s:wht_l[0], s:gry_d[0], s:wht_l[1], s:gry_d[1]],
            \ ]

" インサートモード(右側)
let g:pltt.insert.right = [
            \ [s:wht_l[0], s:blk_d[0], s:wht_l[1], s:blk_d[1]],
            \ [s:wht_l[0], s:blk_n[0], s:wht_l[1], s:blk_n[1]],
            \ [s:wht_n[0], s:blk_l[0], s:wht_n[1], s:blk_l[1]],
            \ [s:wht_n[0], s:gry_d[0], s:wht_n[1], s:gry_d[1]],
            \ [s:wht_n[0], s:gry_n[0], s:wht_n[1], s:gry_n[1]],
            \ ]

" ヴィジュアルモード中央
let g:pltt.visual.middle = [[s:wht_n[0], s:blk_n[0], s:wht_n[1], s:blk_d[1]]]

" ヴィジュアルモード左側
let g:pltt.visual.left = deepcopy(g:pltt.insert.left)
let g:pltt.visual.left[0] = [s:wht_l[0], s:org_d[0], s:wht_l[1], s:org_d[1]]

" ヴィジュアルモード右側
let g:pltt.visual.right = deepcopy(g:pltt.insert.right)

" タブライン中央
let g:pltt.tabline.middle = [[s:gry_n[0], s:blk_n[0], s:gry_n[1], s:blk_n[1]]]

" タブライン左側
let g:pltt.tabline.left = [[s:gry_n[0], s:blk_n[0], s:gry_n[1], s:blk_n[1]]]

" タブラインカレントバッファ
let g:pltt.tabline.tabsel = [[s:org_n[0], s:blk_d[0], s:org_n[1], s:blk_d[1]]]

" タブライン右側
let g:pltt.tabline.right = [
            \ [s:wht_n[0], s:blk_d[0], s:wht_n[1], s:blk_d[1]],
            \ [s:wht_n[0], s:blk_n[0], s:wht_n[1], s:blk_n[1]],
            \ [s:wht_n[0], s:blk_l[0], s:wht_n[1], s:blk_l[1]],
            \ [s:wht_l[0], s:gry_d[0], s:wht_l[1], s:gry_d[1]],
            \ ]


" ----------------------------------------
" component 用関数定義
" ----------------------------------------
function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LspServerStatusForStatusLine()
    return g:lsp#get_server_status()
endfunction

function! LspWarningNum()
    let s:warning_num = lsp#get_buffer_diagnostics_counts()['warning']
    return s:warning_num == 0 ? '' : 'Warning:' . s:warning_num
endfunction

function! LspErrorNum()
    let s:error_num = lsp#get_buffer_diagnostics_counts()['error']
    return s:error_num == 0 ? '' : 'Error:' . s:error_num
endfunction

function! LspErrorColor()
    TODO 動かない...(g:plttの値が更新されていない模様)
    let s:error_num = lsp#get_buffer_diagnostics_counts()['error']

    if s:error_num != 0
        " ステータスライン右側(LSPError LSPWarning LSPStatus LineNum None)
        let g:pltt.normal.right = [
        \ [s:org_l[0], s:blk_d[0], s:org_l[1], s:blk_d[1]],
        \ [s:org_l[0], s:blk_n[0], s:org_l[1], s:blk_n[1]],
        \ [s:org_n[0], s:blk_l[0], s:org_n[1], s:blk_l[1]],
        \ [s:org_n[0], s:gry_d[0], s:org_n[1], s:gry_d[1]],
        \ [s:org_n[0], s:gry_n[0], s:org_n[1], s:gry_n[1]],
        \ ]
    else
        " ステータスライン右側(LSPError LSPWarning LSPStatus LineNum None)
        let g:pltt.normal.right = [
        \ [s:wht_l[0], s:blk_d[0], s:wht_l[1], s:blk_d[1]],
        \ [s:wht_l[0], s:blk_n[0], s:wht_l[1], s:blk_n[1]],
        \ [s:wht_n[0], s:blk_l[0], s:wht_n[1], s:blk_l[1]],
        \ [s:wht_n[0], s:gry_d[0], s:wht_n[1], s:gry_d[1]],
        \ [s:wht_n[0], s:gry_n[0], s:wht_n[1], s:gry_n[1]],
        \ ]
    endif
    let g:lightline#colorscheme#mypalette#palette = g:pltt
    unlet g:pltt g:STL_BASECOLOR g:STL_ATTRIBUTECOLOR

    " return s:error_num == 0 ? '' : 'Error:' . s:error_num
endfunction

augroup lightline#LSP
  autocmd!
  autocmd User FileChangedShellPost call lightline#update()
augroup END

let g:lightline#colorscheme#mypalette#palette = g:pltt
unlet g:pltt g:STL_BASECOLOR g:STL_ATTRIBUTECOLOR

'''


# ウィンドウ上部のタブを拡張
[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
depends = ['lightline.vim']
hook_add = '''
" バッファ名に番号を表示しない
let g:lightline#bufferline#show_number = 0
" バッファ名を表示するときにパスを省略型で表示
let g:lightline#bufferline#shorten_path = 1
" 名前の付いていないバッファが表示された時の標記方法
let g:lightline#bufferline#unnamed = '[No Name]'
" バッファの表示設定(相対パスで表示)
let g:lightline#bufferline#filename_modifier = '%f'
'''


