#TODO list -------------------------------------------------------
# 
# 'junegunn/fzf'
# - ripgrepの対応について
#   - コマンドラインから利用するなら sudo apt-get install ripgrep の方が良い
#   - しかし，恐らくvimでしか使わないため，バイナリを拾ってたりする
#   - ripgrep はRust の導入がいるらしい?
# - 何より余計なインストールの手間を省くことが目標
# - fzf & ripgrep インストールについて自作した方が早いまである
# - floatingwindowをオサレにしたい


# 曖昧検索(ファジー検索)インターフェース
[[plugins]]  
repo = 'junegunn/fzf'
merged = 0
hook_post_update = '''
" --- fzfのインストール	---
" バイナリファイルのディレクトリ
let s:fzf_bin_dir = expand(g:dein_dir . '/repos/github.com/junegunn/fzf/bin')
if has('mac')
    try
        let g:dein#plugin.build = './install --all'
        throw "Error messege: Cannot install fzf..."
    catch /error/  " エラーメッセージにマッチする正規表現
    catch          " 空の場合は必ずマッチする
        " ... 例外処理 ...
        if strlen(glob(s:fzf_bin_dir . '/fzf.exe')) == 0
            execute '!curl -OLsS https://github.com/junegunn/fzf-bin/releases/download/0.18.0/fzf-0.18.0-darwin_amd64.tgz'
            execute '!tar -zxvf fzf-0.18.0-darwin_amd64.tgz'
            execute '!mv fzf' s:fzf_bin_dir
            execute '!rm -rf *.tgz'
        endif
    endtry
elseif has('unix')
    try
        let g:dein#plugin.build = './install --all'
        throw "Error messege: Cannot install fzf..."
    catch /error/  " エラーメッセージにマッチする正規表現
    catch          " 空の場合は必ずマッチする
        " ... 例外処理 ...
        if strlen(glob(s:fzf_bin_dir . '/fzf.exe')) == 0
            execute '!curl -OLsS https://github.com/junegunn/fzf-bin/releases/download/0.18.0/fzf-0.18.0-linux_amd64.tgz'
            execute '!tar -zxvf fzf-0.18.0-linux_amd64.tgz'
            execute '!mv fzf' s:fzf_bin_dir
            execute '!rm -rf *.tgz'
        endif
    endtry
elseif has('win64')
    " windowsの場合ビルド方法が分からないため,バイナリを取得(かなり強引)
    if strlen(glob(s:fzf_bin_dir . '/fzf.exe')) == 0
        execute '!curl -OLsS https://github.com/junegunn/fzf-bin/releases/download/0.18.0/fzf-0.18.0-windows_amd64.zip'
        execute '!unzip fzf-0.18.0-windows_amd64.zip'
        execute '!move fzf.exe' s:fzf_bin_dir
        execute '!del *.zip'
    endif
else
endif

" --- ripgrep のインストール ---
" ripgrepのバイナリを強引に取得
if has('mac')
    if strlen(glob(s:fzf_bin_dir . '/rg')) == 0
        execute '!curl -OLsS https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep-11.0.2-x86_64-apple-darwin.tar.gz'
        execute '!tar -zxvf ripgrep-11.0.2-x86_64-apple-darwin.tar.gz'
        execute '!mv ./ripgrep*/rg' s:fzf_bin_dir
        execute '!rm -rf ./ripgrep-11.0.2-x86_64-*'
    endif
    
elseif has('unix')
    let s:fzf_bin_dir = expand(g:dein_dir . '/repos/github.com/junegunn/fzf/bin')
    if strlen(glob(s:fzf_bin_dir . '/rg')) == 0
        execute '!curl -OLsS https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep-11.0.2-x86_64-unknown-linux-musl.tar.gz'
        execute '!tar -zxvf ripgrep-11.0.2-x86_64-unknown-linux-musl.tar.gz'
        execute '!mv ./ripgrep*/rg' s:fzf_bin_dir
        execute '!rm -rf ./ripgrep-11.0.2-x86_64-unknown-linux-musl*'
    endif

elseif has('win64')
    if strlen(glob(s:fzf_bin_dir . '/rg.exe')) == 0
        execute '!curl -OLsS https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep-11.0.2-x86_64-pc-windows-gnu.zip'
        execute '!unzip ripgrep-11.0.2-x86_64-pc-windows-gnu.zip'
        execute '!move rg.exe' s:fzf_bin_dir
        execute '!del *.zip'
        execute '!del *.ps1'
    endif
else
endif
'''
hook_add = '''
" Windows 環境でripgrep を利用できるようにPATHを通す
let s:fzf_bin_dir = expand(g:dein_dir . '/repos/github.com/junegunn/fzf/bin')
if has('win64')
    let $PATH .= ';' . s:fzf_bin_dir
else
endif
'''


[[plugins]]  # 'junegunn/fzf' のvim用プラグイン
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
" <Leader> + a でRipgrep(ripgrepがインストールされていないと使えない)
nnoremap <Leader>a :Rg<CR>
" <Leader> + s で現在展開中のバッファの文字列を検索
nnoremap <Leader>s :BLines<CR>
" <Leader> + d で現在開いているバッファの一覧表示及び絞り込み
nnoremap <Leader>d :Buffers<CR>
" <Leader> + f でファイル検索
nnoremap <Leader>f :Files<CR>
" <Leader> + w マークの一覧表示
nnoremap <Leader>w :Marks<CR>
" <Leader> + q で最近展開したファイルを表示&検索
nnoremap <Leader>q :History<CR>
" [Insert] Ctrl + f パス保管用fzfを展開
imap <C-f> <plug>(fzf-complete-path)

augroup fzf
    autocmd!
    autocmd! FileType fzf
    " fzfウィンドウ展開時，<Leader>を2回連続入力すると、ウィンドウを閉じる
    au FileType fzf tnoremap <Leader><Leader> <ESC>
    " ステータスラインの非表示化
    " au FileType fzf set laststatus=0 noruler | au BufLeave <buffer> set laststatus=2 ruler
augroup END

" 可能であれば展開済みバッファへ移動
let g:fzf_buffers_jump = 1
" 表示領域を画面下部N%以内にする
let g:fzf_layout = {'down': '~40%'}

" :Rg コマンドでプレビュー表示 (TODO windowsに対応できていない?)
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:~60%')
  \           : fzf#vim#with_preview('right:45%'),
  \   <bang>0)

" :Files コマンドでプレビュー表示
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" ファイル展開方法
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit',
  \ }

" float windowの利用[Only Neovim env]
if has('nvim')
    " let $FZF_DEFAULT_OPTS .= ' --border --margin=0,2'
    let $FZF_DEFAULT_OPTS .= '--margin=0,2'

    " float window定義
    function! FloatWinForFZF()
        let width = min([&columns - 4, max([80, &columns - 20])])
        let height = min([&lines - 4, max([20, &lines - 10])])
        let top = ((&lines - height) / 2) - 1
        let left = (&columns - width) / 2
        let opts = {'relative': 'editor', 'row': top, 'col': left, 'width': width, 'height': height, 'style': 'minimal'}

        " float windowのフレームライン
        let top = "╭" . repeat("─", width - 2) . "╮"
        let mid = "│" . repeat(" ", width - 2) . "│"
        let bot = "╰" . repeat("─", width - 2) . "╯"
        let lines = [top] + repeat([mid], height - 2) + [bot]

        let s:buf = nvim_create_buf(v:false, v:true)
        call nvim_buf_set_lines(s:buf, 0, -1, v:true, lines)
        call nvim_open_win(s:buf, v:true, opts)

        " カラー定義
        " hi ColorFZF guifg=#ffcccc guibg=#232323
        hi ColorFZF guifg=#f6ae72 guibg=#343434
        set winhighlight=Normal:ColorFZF
        " 現在のウィンドウの半透明度を指定
        set winblend=30

        let opts.row += 1
        let opts.height -= 2
        let opts.col += 2
        let opts.width -= 4

        call nvim_open_win(nvim_create_buf(v:false, v:true), v:true, opts)
        au BufWipeout <buffer> exe 'bw '.s:buf
    endfunction

    let g:fzf_layout = { 'window': 'call FloatWinForFZF()' }
endif

'''
