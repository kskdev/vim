#TODO list -------------------------------------------------------
#
# 'prabirshrestha/asyncomplete.vim'
# - deopleteのような曖昧部分一致の補完が欲しい...


# 非同期で補完を行うためのプラグイン(deoplete.nvimみたいなもの?)
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
" popup表示までのち円時間[ms] (defaulat:30)
let g:asyncomplete_popup_delay = 10
" TAB で補完(順選択)
" inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" Shift TAB で補完(逆順選択)
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
" リターンキーで補完ポップアップを閉じる
inoremap <expr><CR> pumvisible() ? asyncomplete#close_popup(): "\<CR>" 

" LSPを用いた補完の利用
let g:lsp_async_completion = 1

" C-Space で強制更新
imap <c-space> <Plug>(asyncomplete_force_refresh)
" autocmd FileType python setlocal omnifunc=lsp#complete
" 自動補完候補表示の有効化
let g:asyncomplete_auto_popup = 1
" バックスペースに対応
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction
" TAB で補完(順選択)
inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()
" Shift TAB で補完(逆順選択)
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Omni 補完の有効化
set completeopt+=preview
'''


# asyncomplete.vim のvim-lsp拡張
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = ['vim-lsp', 'asyncomplete.vim']


# asyncomplete.vim のバッファ補完拡張
[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
depends = ['asyncomplete.vim']
hook_add = '''
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'priority': 50,
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
    \    'max_buffer_size': 500000,
    \  },
    \ }))
'''

# asyncomplete.vim のファイル補完拡張
[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
depends = ['asyncomplete.vim']
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 70,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
'''


# vimコマンド補完用プラグイン
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim']


# asyncomplete.vim のvim script補完拡張
[[plugins]]
repo = 'prabirshrestha/asyncomplete-necovim.vim'
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
    \ 'name': 'necovim',
    \ 'whitelist': ['vim'],
    \ 'priority': 90,
    \ 'completor': function('asyncomplete#sources#necovim#completor'),
    \ }))
'''


# asyncomplete-neosnippet.vimで利用するためのスニペット1
[[plugins]]
repo = 'Shougo/neosnippet.vim'


# asyncomplete-neosnippet.vimで利用するためのスニペット2
[[plugins]]
repo = 'Shougo/neosnippet-snippets'


# asyncomplete.vim のNeosnippet補完拡張
[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['asyncomplete.vim', 'neosnippet-snippets', 'neosnippet.vim']
hook_add = '''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'priority': 90,
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))
" キーマッピング設定
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''


# 関数等の引数を表示
[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'echo'
'''
