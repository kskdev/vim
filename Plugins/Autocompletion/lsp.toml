#TODO list -------------------------------------------------------
#
# 'prabirshrestha/vim-lsp'
# - LSPによる補完はサーバーが running 状態になってからで無いと補完が効かない(deopleteで確認)
# - clang の補完周りのインストールが面倒
#   - brew install llvm が必要だった
# - プレビューウィンドウを非表示にしたい...
#   - 画面上で新しくバッファが開く.便利だが鬱陶しい
#   - 将来はfloating window と連携して快適にしたい
# 'prabirshrestha/async.vim'
# - async.vimの役割は,曰く, async.vim is required to use vim-lsp. It is used to normalize the jobs api between Vim 8 and Neovim.

# 非同期処理用のプラグイン
[[plugins]]
repo = 'prabirshrestha/async.vim'


# Language Server Protocol
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_source = '''
" LSP 有効化
let g:lsp_auto_enable = 1
" Lint有効化
let g:lsp_diagnostics_enabled = 1
" Lint結果を記号表示
let g:lsp_signs_enabled = 1
" 記号の表示優先順位の設定
let g:lsp_signs_priority = 10
" Lintの詳細をステータスラインに表示
let g:lsp_diagnostics_echo_cursor = 1
" Lintの詳細を行末に表示
let g:lsp_virtual_text_enabled = 0
" floating windowの利用
let g:lsp_preview_float = 1
" ハイライト表示を無効化
let g:lsp_highlights_enabled = 0
" テキストプロパティの有効化
let g:lsp_textprop_enabled = 0
" プレビューを自動で閉じる
let g:lsp_preview_autoclose = 1
" プレビューウィンドウに移動しない
let g:lsp_preview_keep_focus = 1
" 左端記号の表示設定
let g:lsp_signs_error = {'text': 'X'}
let g:lsp_signs_warning = {'text': '!'}
let g:lsp_signs_information = {'text': 'i'}
let g:lsp_signs_hint = {'text': '?'}
" ログやデバッグ用の設定
let g:lsp_log_verbose = 0
let g:lsp_log_file = expand('~/vim-lsp.log')
'''
hook_add = '''
" sign と virtual text の色定義 
augroup vimlsp_colors
    autocmd!
    au ColorScheme * :hi LspErrorText ctermfg=red guifg=red
    au ColorScheme * :hi LspWarningText ctermfg=yellow guifg=yellow
    au ColorScheme * :hi LspInformationText ctermfg=gray guifg=gray
    au ColorScheme * :hi LspHintfomationText ctermfg=cyan guifg=cyan
augroup END

" Omni 補完の有効化
setlocal omnifunc=lsp#complete
" Ctrl+j で次のエラー箇所へジャンプ
noremap <silent><C-j> :LspNextError<CR>
" Ctrl+k で前のエラー箇所へジャンプ
noremap <silent><C-k> :LspPreviousError<CR>
" Ctrl+l で定義元へジャンプ
nnoremap <silent><C-l> :LspDefinition<CR>

let s:kakuchoshi = expand('%:e')
" Python補完設定
if s:kakuchoshi == 'py' && executable('pyls')
    let s:pyls_path = fnamemodify(g:python3_host_prog, ':h') . '/'. 'pyls'
    au User lsp_setup call lsp#register_server({
                \ 'name': 'pyls',
                \ 'cmd': {server_info->['pyls']},
                \ 'whitelist': ['python'],
                \ })
endif

" C言語補完設定
if s:kakuchoshi == 'c' && executable('clangd')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ 'whitelist': ['c, h'],
                \ })
endif

" C++言語補完設定
if s:kakuchoshi == 'cpp' && executable('clangd')
    au User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ 'whitelist': ['cpp, hpp, h'],
                \ })
endif

" C++言語補完設定(正規表現活用版. 現在編集中...)
" if match(s:kakuchoshi,'(cpp|hpp|h)')!=#-1 && executable('clangd')
"     au User lsp_setup call lsp#register_server({
"                 \ 'name': 'clangd',
"                 \ 'cmd': {server_info->['clangd', '-background-index']},
"                 \ 'whitelist': ['cpp, hpp, h'],
"                 \ })
" endif
'''


# LSP経由でタグジャンプ等が使えるようになる
[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['vim-lsp']
hook_add = '''
" fzf の表示領域設定
let g:vista_fzf_preview = ['right:50%']
" アイコン表示を無効化
let g:vista#renderer#enable_icon = 0
" アイコンの定義
let g:vista#renderer#icons = {"function":"f", "variable":"v"}
" Vistaの実行プラグインを指定
let g:vista_default_executive = 'vim_lsp'
" Vista の実行プラグインを言語別に指定可能
let g:vista_executive_for = {'python':'vim_lsp'}
'''


