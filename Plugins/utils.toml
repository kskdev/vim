#TODO list -------------------------------------------------------
#
# 'Shougo/defx.nvim'
# - ターミナル上で何回も 'bash install.sh && vi' みたいなことをやっていると何故か起動エラーが起こるようになる
#   - もちろん初回インストール時は正しく動く
# - ftがdefxならquit 違うならdefxウィンドウを起動するみたいなトグルに変えてもいいかも?
# - defx のインストールが出来ない場合,nerdtreeを利用していく方向
# 'Shougo/deol.nvim'
# - 将来的にfloatingウィンドウで揃えたい(defx, deol等のShougo製プラグイン)


# :help を日本語化
[[plugins]]
repo = 'vim-jp/vimdoc-ja'


# ディレクトリツリーの表示
# [[plugins]]
# repo = 'scrooloose/nerdtree'
# hook_add = '''
# " Ctrl + n でツリー表示のon/off切り替え
# nnoremap <C-n> :NERDTreeToggle<CR>
# '''


# ディレクトリツリーの表示やファイル操作
[[plugins]]
repo ='Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
" Ctrl + n でdefx起動. トグル対応. (画面左側に表示)
nnoremap <silent> <C-n> :<C-u>Defx -toggle -split=vertical -winwidth=30 -direction=topleft<CR>

" defxウィンドウ内専用キーマップ
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
    " ファイル展開(展開後もdefxバッファを開いたまま. nerdtree に近い振る舞い)
    nnoremap <silent><buffer><expr> <CR> defx#do_action('multi', ['drop', 'vsplit'])
    " ファイル展開(展開後もdefxバッファ削除)
    nnoremap <silent><buffer><expr> o defx#do_action('multi', ['drop', 'quit'])
    " 終了
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <ESC> defx#do_action('quit')
    " カーソル行のファイルパス名をyank
    nnoremap <silent><buffer><expr> y defx#do_action('yank_path')
    " カーソル行のファイルをコピー
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    " カーソル行のファイルの移動元を指定
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    " copy や move の貼り付け
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    " 新しいディレクトリの作成
    nnoremap <silent><buffer><expr> d defx#do_action('new_directory')
    " 新しいファイルの作成
    nnoremap <silent><buffer><expr> f defx#do_action('new_file')
    " ファイル(ディレクトリも)削除
    nnoremap <silent><buffer><expr> x defx#do_action('remove')
    " ファイル(ディレクトリ)の名前を変更
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    " ドットファイルの表示/非表示切り替え
    nnoremap <silent><buffer><expr> a defx#do_action('toggle_ignored_files')
    " 一つ上のディレクトリへ移動
    nnoremap <silent><buffer><expr> u defx#do_action('cd', ['..'])
    " ホームディレクトリへ移動
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    " vimのワーキングディレクトリを設定
    nnoremap <silent><buffer><expr> w defx#do_action('change_vim_cwd')
    " 複数選択
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    " 全選択
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    " 直前の操作を実行
    nnoremap <silent><buffer><expr> . defx#do_action('repeat')
    " 外部コマンド実行
    nnoremap <silent><buffer><expr> e defx#do_action('execute_command')
    " カーソル循環上下移動
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    " 再描画?
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    " ステータスラインにフルパスを表示
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
endfunction
'''


# ターミナル起動
[[plugins]]
repo ='Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
" <Leader> + i でdeol 起動
if has('nvim')
    " floating window版
    nnoremap <silent><Leader>i :<C-u>Deol -split=floating<CR>
    autocmd FileType deol set winblend=30
else
    " ウィンドウ分割版
    nnoremap <silent><Leader>i :<C-u>Deol -split=horizontal<CR>
endif


" deol起動後のターミナルバッファ専用キーマップ
autocmd FileType deol call s:deol_my_settings()
function! s:deol_my_settings() abort
    " ターミナルモード : ESCでバッファを閉じる
    tnoremap <silent><ESC> <C-\><C-n>:bd!<CR>
    " ターミナルモード : ESCでバッファを閉じる
    tnoremap <silent><Leader><Space> <C-\><C-n>:bd!<CR>
    " ターミナルモード : fffでノーマルモードへ以降
    tnoremap <silent>fff <C-\><C-n>
    " Deol コマンドで開いたウィンドウは全て半透明にする。
endfunction
'''


# ヤンク(コピー)領域の可視化
[[plugins]]
repo = 'machakann/vim-highlightedyank'
hook_add = '''
" ハイライトカラーの設定
highlight HighlightedyankRegion cterm=reverse gui=reverse
" ハイライト表示する時間[ms]
let g:highlightedyank_highlight_duration = 500
'''


# インデントの可視化 
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" 色の変更(詳しい配色 'ctermbg vim'等で検索 ) 配色はカラースキーマに合わせて設定
augroup indentguide
    autocmd!
    au Colorscheme * :hi IndentGuidesOdd ctermbg=236
    au Colorscheme * :hi IndentGuidesEven ctermbg=238
augroup END

" indent guideの有効
let g:indent_guides_enable_on_vim_startup = 1
" 自動配色の無効化
let g:indent_guides_auto_colors = 0
" ガイドの幅を設定
let g:indent_guides_guide_size = 1
'''


# j,k キーでカーソル移動の高速化
[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
" j,kにキーマッピング
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''


# f キージャンプの拡張
[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
" 検索対象が現在の行に無ければ次の行へ移動
let g:clever_f_across_no_line = 0
" 小文字検索->大文字&小文字を対象 大文字検索->大文字のみ対象
let g:clever_f_smart_case = 1
" 日本語とかの検索に対応(微妙に対応が悪いので無効化)
let g:clever_f_use_migemo = 0
'''


# 特定文字へカーソルジャンプ
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
" デフォルトキーマッピングの無効化
let g:EasyMotion_do_mapping = 0
" 小文字入力時,大文字も含めて検索
let g:EasyMotion_smartcase = 1
" ジャンプ先のターゲットキーを指定
let g:EasyMotion_keys = 'ASDFGHJKL'
" ターゲットキーを大文字で表示
let g:EasyMotion_use_upper = 1

" キーマッピング
" ss キーを入力後,任意の2文字を入力するとeasymotionを起動(分割ウィンドウに対応)
nmap ss <Plug>(easymotion-overwin-f2)
xmap ss <Plug>(easymotion-overwin-f2)
omap ss <Plug>(easymotion-overwin-f2)
'''


# git の diffを左端に表示
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
" タイピング停止から反映されるまでの時間[ms]
set updatetime=100
" ハンク(変更点のかたまり)へジャンプ
nmap <C-f> <Plug>(GitGutterNextHunk)
nmap <C-d> <Plug>(GitGutterPrevHunk)

" プラグインの有効化
let g:gitgutter_enabled = 1
" 行のハイライトを無効化
let g:gitgutter_highlight_lines = 0
" 非同期で処理 (非同期処理に対応していない場合機能しない)
let g:gitgutter_async = 1
" 記号を表示するカラムの背景色変更しない
let g:gitgutter_override_sign_column_highlight = 1
" 各記号の変更
let g:gitgutter_sign_added='+'
let g:gitgutter_sign_modified='~'
let g:gitgutter_sign_removed='-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = 'w'
'''


# vim上でgit操作を可能にする
[[plugins]]
repo = 'tpope/vim-fugitive'


# vimを開きながら編集中のファイルを実行
[[plugins]]
# TODO もう少し有効に利用したいところ
repo = 'thinca/vim-quickrun'


# 括弧やクォーテーションなどを補間
[[plugins]]
repo = 'jiangmiao/auto-pairs'


# 記号ペアで範囲を囲んだり置換や削除を行う
[[plugins]]
repo = 'machakann/vim-sandwich'


# vim-operator-replace の依存プラグイン
[[plugins]]
repo = 'kana/vim-operator-user'


# yank文字列と置き換えるオペレータ拡張
[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add = '''
nmap s <Plug>(operator-replace)
'''


# 表示を整える
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" ga 入力後,指定の文字を入力して実行 (in visual mode)
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''


# gcc でコメントアウト
[[plugins]]
repo = 'tomtom/tcomment_vim'


# ヴィジュアルモードの選択範囲を「*」で検索
[[plugins]]
repo = 'nelstrom/vim-visual-star-search'


# 検索位置を表示(マッチ数等も表示)
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
" ハイライト箇所の横に (n/MatchNum) 形式で表示
nmap n <Plug>(anzu-n)<Plug>(anzu-mode)
nmap N <Plug>(anzu-N)<Plug>(anzu-mode)

" カーソル位置のテキストオブジェクトをハイライト
" nmap * <Plug>(anzu-star-with-echo)
" nmap # <Plug>(anzu-sharp-with-echo)
'''


# カーソルキー動作停止+何か表示される
[[plugins]]
repo = 'modsound/gips-vim'
hook_add = '''
" Select english_words, quickref_vim, gundam or tsundere
let g:gips_reading_txt = g:dein_dir . '/repos/github.com/modsound/gips-vim/autoload/dict/quickref_vim.txt'
'''


# tomlファイルにシンタックスハイライトを適用
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']


# カーソル位置のコンテキストに合わせてftを切り替える
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_ft = ['toml']


# カーソル位置のコンテキストのftを判定
[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_ft = ['toml']


# 置換時にプレビュー表示(置換の基本コマンド: %s/before/after/g[c])
[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
" Ctrl+s でover.vimの起動 
nnoremap <C-s> :OverCommandLine <CR>%s//g<Left><Left>
" ノーマルモード時に sub と入力することでカーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" ノーマルモード時に subp と入力することでコピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''


# 置換時にプレビュー表示(置換の基本コマンド: %s/before/after/g[c])
[[plugins]]
repo = 'reireias/vim-cheatsheet'
hook_add = '''
" :Cheat でvimのチートファイルを開く
let g:cheatsheet#cheat_file = g:dein_dir . '/cheatsheet.md'

if has('nvim')
    " float windowを利用する場合の設定
    let g:cheatsheet#float_window = 1
    let g:cheatsheet#float_window_width_ratio = 0.8
    let g:cheatsheet#float_window_height_ratio = 0.4
    " float windowのハイライト定義(TODO まだ色設定が未対応)
    hi CheatSheatColor guifg=#2e3440 guibg=#ebcb8b
    set winhighlight=Normal:CheatSheatColor
    " set winhighlight=Normal:NormalNC
    " 透明度指定
    set winblend=40

endif
" Ctrl+c でチートシート展開トグル
nnoremap <silent> <C-c> :<C-u>:Cheat<CR>
'''


# Read-Eval-Print Loop(REPL)をvimで使う
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
" REPLを自動的に改行
let g:neoterm_autoscroll = 1
" 画面左側に結果を展開
let g:neoterm_default_mod = 'vertical'
" ノーマルモードで現在のカーソル行を実行
nmap <C-e> <Plug>(neoterm-repl-send-line)
" ヴィジュアルモードで選択範囲を実行
xmap <C-e> <Plug>(neoterm-repl-send)

" neoterm起動後のターミナルバッファ専用キーマップ
autocmd FileType neoterm call s:neoterm_my_settings()
function! s:neoterm_my_settings() abort
    " ESCでターミナルモードを抜ける
    tnoremap fff <C-\><C-n><C-w>
    " ターミナル画面バッファを終了
    nnoremap <silent><ESC> :Tclose!<CR>
endfunction
'''


# mark機能を画面左端に表示
[[plugins]]
repo = 'kshenoy/vim-signature'
hook_add = '''
'''


# 構文のスコープ対応ジャンプに対応するプラグイン
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
" matchupの有効化
let g:loaded_matchit = 1

" スコープ対応の可視化色
augroup matchup_matchparen_highlight
  autocmd!
  autocmd ColorScheme * hi MatchParen ctermbg=None guibg=None ctermfg=yellow guifg=LightGreen cterm=bold gui=bold
augroup END
'''

