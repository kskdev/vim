# プラグインをdeinで管理
# 参考サイト
# https://qiita.com/kawaz/items/ee725f6214f91337b42b


[[plugins]]  # プラグインマネージャー
repo = 'Shougo/dein.vim'


[[plugins]]  # カラースキーマの設定(テーマ一覧:http://vimcolors.com/)
# my favorite : joshdick/onedark.vim cocopon/iceberg.vim 'morhetz/gruvbox'
repo = 'morhetz/gruvbox'
hook_add = '''
colorscheme gruvbox
set background=dark
'''


[[plugins]]  # ステータスバーカスタマイズ
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
            \'colorscheme': 'wombat',
            \'mode_map': {'c': 'NORMAL'},
            \'active': {
            \   'left': [
            \       [ 'mode', 'paste' ],
            \       [ 'fugitive' ],
            \       [ 'readonly', 'relativepath', 'modified' ]
            \   ],
            \   'right':[
            \       [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
            \       ['lineinfo'],
            \       [ 'filetype', 'fileformat', 'fileencoding' ]
            \   ],
            \},
            \'component': {
            \   'linenum': '%L',
            \   'lineinfo': '%l/%L',
            \   'relativepath': '%f'
            \},
            \'component_function': {
            \   'modified': 'LightlineModified',
            \   'readonly': 'LightlineReadonly',
            \   'fugitive': 'LightlineFugitive',
            \   'filename': 'LightlineFilename',
            \   'fileformat': 'LightlineFileformat',
            \   'filetype': 'LightlineFiletype',
            \   'fileencoding': 'LightlineFileencoding',
            \   'mode': 'LightlineMode'
            \},
            \'separator': { 'left': '', 'right': '' },
            \'subseparator': { 'left': '|', 'right': '|' }
            \}

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''


[[plugins]]  # ALEによるlint結果をステータスラインに表示するためのlightlineの拡張
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_source = '''
let g:lightline.component_expand = {
            \'linter_checking': 'lightline#ale#checking',
            \'linter_warnings': 'lightline#ale#warnings',
            \'linter_errors': 'lightline#ale#errors',
            \'linter_ok': 'lightline#ale#ok',
            \ }
let g:lightline.component_type = {
            \'linter_checking': 'right',
            \'linter_warnings': 'warning',
            \'linter_errors': 'error',
            \'linter_ok': 'right',
            \}
'''


[[plugins]]  # ウィンドウ上部のタブを拡張
repo = 'mengelbrecht/lightline-bufferline'
depends = ['lightline.vim']
hook_add = '''
" タブを常に表示
set showtabline=2
'''
hook_source = '''
" バッファ名に番号を表示しない
let g:lightline#bufferline#show_number  = 0
" バッファ名を表示するときにパスを省略しない
let g:lightline#bufferline#shorten_path = 0
" 名前の付いていないバッファが表示された時の標記方法
let g:lightline#bufferline#unnamed      = '[No Name]'

" バッファの表示設定
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline.tabline                      = {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand             = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type               = {'buffers': 'tabsel'}

" TODO バッファ番号が連続しない理由は以下のURLを参考に
" https://stackoverflow.com/questions/28394713/vim-what-happened-to-buffer-2
'''


[[plugins]]  # ディレクトリツリーの表示
repo = 'scrooloose/nerdtree'


[[plugins]]  # インデントの可視化 
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" 色の変更(詳しい配色 'ctermbg vim'等で検索 ) 配色はカラースキーマに合わせて設定した
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=236
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=238
'''
hook_source = '''
" indent guideの有効
let g:indent_guides_enable_on_vim_startup = 1
" 自動で色を付けない
let g:indent_guides_auto_colors = 0
" ガイドの幅を設定
let g:indent_guides_guide_size = 1
'''


[[plugins]]  # j,k キーでカーソル移動の高速化
repo = 'rhysd/accelerated-jk'
hook_add = '''
" j,kにキーマッピング
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
'''


[[plugins]]  # sキーで特定文字へカーソルジャンプ
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0
let g:EasyMotion_keys = 'ASDFGHJKL'
let g:EasyMotion_use_upper = 1
let g:EasyMotion_enter_jump_first = 1
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)
'''


[[plugins]]  # git の diffを左端に表示
repo = 'airblade/vim-gitgutter'
hook_add = '''
" タイピング停止から反映されるまでの時間[ms]
set updatetime=250
" ハンク(変更点のかたまり)へジャンプ
nmap <C-d> <Plug>GitGutterNextHunk
nmap <C-f> <Plug>GitGutterPrevHunk
'''
hook_source = '''
" プラグインの有効化
let g:gitgutter_enabled = 1
" 左端2文字分の空間を常に表示
set signcolumn=auto " instead of : let g:gitgutter_sign_column_always=1

" 行のハイライトを起動時から有効にする
let g:gitgutter_highlight_lines = 0
let g:gitgutter_async = 1
let g:gitgutter_override_sign_column_highlight=1
let g:gitgutter_sign_added='+'
let g:gitgutter_sign_modified='~'
let g:gitgutter_sign_removed='-'
" let g:gitgutter_sign_removed_first_line='^'
" let g:gitgutter_sign_modified_removed='w'
'''


[[plugins]]  # ファイル検索 プラグイン(ctrlpより高速なため採用)
repo = 'junegunn/fzf'
build = './install --all'
merged = 0
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
nnoremap <leader><leader> :Commands<CR>
" Ctrl + b で現在開いているバッファの一覧表示及び絞り込み
nnoremap <C-b> :Buffers<CR>
" ripgrepによる文字列検索 (TODO 使い方がよくわからん)
nnoremap <C-g> :Rg<Space>
" Ctrl + p でファイル検索
nnoremap <C-p> :call FzfOmniFiles()<CR>
fun! FzfOmniFiles()
  let is_git = system('git status')
  if v:shell_error
    :Files
  else
    :GitFiles
  endif
endfun
'''


[[plugins]]  # vimを開きながら編集中のファイルを実行
repo = 'thinca/vim-quickrun'


[[plugins]]  # 括弧補間
repo = 'jiangmiao/auto-pairs'


[[plugins]]  # テキストを囲う
repo = 'tpope/vim-surround'
# visual mode -> S' : 選択範囲を囲む
# normal mode -> cs': 囲んでいる範囲を置換
# normal mode -> ds': 囲んでいる範囲を削除


[[plugins]]  # ga で見た目を整形する
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''


[[plugins]]  # gcc でコメントアウト
repo = 'tomtom/tcomment_vim'


[[plugins]]  # ヴィジュアルモードの選択範囲を「*」で検索
repo = 'nelstrom/vim-visual-star-search'


[[plugins]]  # カーソルキー動作停止+何か表示される
repo = 'modsound/gips-vim'
hook_add = '''
" テキストリストのパスを指定 (english_words or quickref_vim or gundam or tsundere)
if has('nvim')
let g:gips_reading_txt = '~/.config/nvim/repos/github.com/modsound/gips-vim/autoload/dict/tsundere.txt'
else
let g:gips_reading_txt = '~/.vim/dein/repos/github.com/modsound/gips-vim/autoload/dict/tsundere.txt'
endif
'''


[[plugins]]  # tomlファイルにシンタックスハイライトを適用
repo = 'cespare/vim-toml'
on_ft = ['toml']


[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']


[[plugins]] # カーソル位置のコンテキストのftを判定
repo = 'Shougo/context_filetype.vim'


[[plugins]] # 置換時にプレビュー表示(置換の基本コマンド: %s/before/after/g[c])
repo = 'osyo-manga/vim-over'
hook_add = '''
" Ctrl+h でover.vimの起動 
nnoremap <C-h> :OverCommandLine <CR>%s//g<Left><Left>
" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''


# deoplete をvim8で動作させるための追加プラグイン1(neovimでは不要)
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '!has("nvim")'


# deoplete をvim8で動作させるための追加プラグイン2(neovimでは不要)
[[plugins]]
repo = 'roxma/nvim-yarp'
if = '!has("nvim")'


# オートコンプリートプラグイン
[[plugins]]
repo = 'Shougo/deoplete.nvim'
# on_event = 'InsertEnter'
hook_add = '''
" Python3インタープリターのパス指定
let g:python3_host_prog = g:python3_path
let g:python_host_prog = g:python2_path
" 補完候補ポップアップの数を調整
set pumheight=12
'''
hook_source = '''
" ### deopleteの設定 ### "
" deoplete 有効化
let g:deoplete#enable_at_startup = 1

" 補完に掛かる時間を指定(ms)
let g:deoplete#auto_complete_delay = 0
" 非同期時から同期に移る時間(ms)
let g:deoplete#auto_refresh_delay = 10
" 補完が始まるまでに必要な文字数
let g:deoplete#auto_complete_start_length = 1
" キャメルケースに対応(細かいことはよくわからん)
let g:deoplete#enable_camel_case = 1
" 大文字小文字を無視して補完する
let g:deoplete#enable_ignore_case = 1
" 補完機能が作用するたびに候補表示を再表示するかどうか
let g:deoplete#enable_refresh_always = 1
" 大文字小文字の区別
let g:deoplete#enable_smart_case = 0
" TODO よくわからん
let g:deoplete#file#enable_buffer_path = 0
" 補完候補の表示数の最大値を設定
let g:deoplete#max_list = 1000
" マルチバイト文字の補完を無効化
let g:skip_multibyte = 1
" deopleteの並列処理のスレッド数 (default : 4)
let g:deoplete#num_processes = 8

" ### キーマッピング ### "
" TAB で補完(順選択)
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
" Shift TAB で補完(逆順選択)
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
" 補完候補選択時，リターンの挙動を制御(選択決定時に改行しない)  " 上手く動作しないので凍結
" inoremap <expr><CR> pumvisible() ? deoplete#close_popup() : "\<CR>"
'''


# Python用 補完プラグイン
[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = ['python']
hook_source = '''
" 利用するインタプリタの指定
let g:deoplete#sources#jedi#python_path = g:python3_path
'''


# docker用 補完プラグイン
[[plugins]]
repo = 'zchee/deoplete-docker'


# 英単語補完プラグイン (lookコマンドとその辞書の導入が必須)
[[plugins]]
repo = 'ujihisa/neco-look'


# vimコマンド補完用プラグイン
[[plugins]]
repo = 'Shougo/neco-vim'


# スニペットファイル
[[plugins]]
repo = 'Shougo/neosnippet-snippets'


# スニペットの動作定義
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']  # スニペットファイルに依存する機能のためほぼ必須
on_ft = ['snippet']
hook_add = '''
" 設定はデフォルト設定のまま
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" エラーと警告の表示色を変更
autocmd Colorscheme * highlight aleErrorSign term=bold cterm=bold ctermfg=196
autocmd Colorscheme * highlight aleWarningSign term=bold cterm=bold ctermfg=172
" ### キーマッピング ### "
" Ctrl+j で補完(順選択)
nmap <C-j> <Plug>(ale_next)
" Ctrl+k で補完(逆順選択)
nmap <C-k> <Plug>(ale_previous)
'''
hook_source = '''
" ### Linter(Warning Error チェック)の設定 ### "
" 利用するLinterの指定
let g:ale_linters = {'python': ['flake8', 'mypy', 'pylint'],}
" エラー・警告表示の行を常に表示
let g:ale_sign_column_always = 1
" 保存時にLinterを実行
let g:ale_lint_on_save = 1
" ファイルを開いた時，lint実行設定	
let g:ale_lint_on_enter = 1
" 編集時にLinterの実行設定
let g:ale_lint_on_text_changed = 'never'
" 余計な空白の警告表示設定
let b:ale_warn_about_trailing_whitespace = 0
" 警告表示時の文字設定
let g:ale_sign_warning = '!'
" エラー表示時の文字設定
let g:ale_sign_error = 'X'
" Linterを実行するファイルサイズ上限[Byte]
let g:ale_maximum_file_size = 1000000
" エラー箇所の文字背景のハイライトを無効化 (Warningまでハイライトされるのは邪魔)
let g:ale_set_highlights = 0
" カーソルを行に合わせたときに表示するメッセージのフォーマット設定
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" ### Fixer(コード整形ツール)の設定 ### "
" TODO 現状，現在利用予定が無いためコメント化している
" 利用するFixerの設定
let b:ale_fixers = {'python': ['autopep8', 'isort', 'black'],}
" ファイルをセーブした時のみFixerを実行設定	
let g:ale_fix_on_save = 0
" 編集時のFixer実行設定
let g:ale_fix_on_text_changed = 'never'
'''
